{"version":3,"sources":["components/orders/product-details/index.js","components/orders/pdf/index.js","components/orders/index.js"],"names":["values","visibility","setVisibility","handleClose","visible","onOk","onCancel","map","product","index","title","productNameEnglish","key","span","productId","unit","quantity","sellingPrice","parseInt","styles","StyleSheet","create","page","padding","section","products","marginLeft","fontSize","flexDirection","borderWidth","width","MyDocument","value","size","style","userName","mobileNo","location","address","totalAmount","pro","useState","ordersList","setOrdersList","showProduct","setShowProduct","currentProducts","setCurrentProducts","completeLoading","setCompleteLoading","useEffect","protectedHttpProvider","getAction","then","res","orders","data","catch","err","notification","error","message","columns","dataIndex","render","item","content","userId","date","Date","dd","String","getDate","padStart","mm","getMonth","yyyy","getFullYear","hours","getHours","minutes","getMinutes","ampm","getDateAndTime","onClick","handleShowProduct","document","fileName","url","className","href","target","rel","id","postAction","status","newList","deepClone","filter","order","_id","success","type","danger","spinning","dataSource"],"mappings":"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","file":"static/js/6.b9e72961.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Modal, Card, Row, Col } from \"antd\";\r\n\r\nexport default function ({ values, visibility, setVisibility }) {\r\n    const handleClose = () => {\r\n        setVisibility(false);\r\n    };\r\n    return (\r\n        <Modal visible={visibility} onOk={handleClose} onCancel={handleClose}>\r\n            {values.map((product, index) => (\r\n                <Card title={product.productNameEnglish} key={index}>\r\n                    <Row>\r\n                        <Col span={8}>Product Id</Col>\r\n                        <Col>{product.productId}</Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col span={8}>Unit</Col>\r\n                        <Col span={2}>{product.unit}</Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col span={8}>Quantity</Col>\r\n                        <Col span={2}>{product.quantity}</Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col span={8}>Price</Col>\r\n                        <Col span={2}>\r\n                            {product.sellingPrice}\r\n                            {` `}Rs\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col span={8}>Total</Col>\r\n                        <Col span={4}>\r\n                            {parseInt(product.sellingPrice) *\r\n                                parseInt(product.quantity)}\r\n                            {` `}Rs\r\n                        </Col>\r\n                    </Row>\r\n                </Card>\r\n            ))}\r\n        </Modal>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { Page, Text, View, Document, StyleSheet } from \"@react-pdf/renderer\";\r\n\r\n// Create styles\r\nconst styles = StyleSheet.create({\r\n    page: {\r\n        padding: 30,\r\n    },\r\n    section: {\r\n        padding: 10,\r\n    },\r\n    products: {\r\n        padding: 5,\r\n        marginLeft: 50,\r\n        fontSize: 13,\r\n        flexDirection: \"row\",\r\n    },\r\n    product: {\r\n        borderWidth: 1,\r\n        width: \"200px\",\r\n        padding: 5,\r\n    },\r\n});\r\n\r\n// Create Document Component\r\nconst MyDocument = ({ value }) => (\r\n    <Document>\r\n        <Page size=\"A4\" style={styles.page}>\r\n            <View style={styles.section}>\r\n                <Text>Name:{`  ${value.userName}`}</Text>\r\n            </View>\r\n            <View style={styles.section}>\r\n                <Text>Phone Number:{`  ${value.mobileNo}`}</Text>\r\n            </View>\r\n            <View style={styles.section}>\r\n                <Text>Location:{`  ${value.location}`}</Text>\r\n            </View>\r\n            <View style={styles.section}>\r\n                <Text>Address:{`  ${value.address}`}</Text>\r\n            </View>\r\n            <View style={styles.section}>\r\n                <Text>Amount Payable:{`  ${value.totalAmount} `}</Text>\r\n            </View>\r\n            <View style={styles.section}>\r\n                <Text>Products</Text>\r\n            </View>\r\n            {(value.products || []).map((pro) => (\r\n                <View style={styles.products}>\r\n                    <View style={styles.product}>\r\n                        <Text>{`${pro.productNameEnglish}`}</Text>\r\n                    </View>\r\n                    <View style={styles.product}>\r\n                        <Text>{`${pro.unit}`}</Text>\r\n                    </View>\r\n                    <View style={styles.product}>\r\n                        <Text>{`${pro.quantity} unit`}</Text>\r\n                    </View>\r\n                    <View style={styles.product}>\r\n                        <Text>{`${pro.sellingPrice} Rs/unit`}</Text>\r\n                    </View>\r\n                </View>\r\n            ))}\r\n        </Page>\r\n    </Document>\r\n);\r\n\r\nexport default MyDocument;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Table, Row, Popover, Button, Spin, notification } from \"antd\";\r\nimport { PDFDownloadLink, BlobProvider } from \"@react-pdf/renderer\";\r\nimport { deepClone } from \"../../common/helper/commonMethods\";\r\n// import { orders } from \"../../common/dataProvider/dummyData\";\r\nimport ProductList from \"./product-details\";\r\nimport PDFDocumnet from \"./pdf\";\r\nimport { protectedHttpProvider } from \"../../common/http\";\r\n\r\nexport default function () {\r\n    const [ordersList, setOrdersList] = useState([]);\r\n    const [showProduct, setShowProduct] = useState(false);\r\n    const [currentProducts, setCurrentProducts] = useState(null);\r\n    const [completeLoading, setCompleteLoading] = useState(true);\r\n\r\n    useEffect(() => {\r\n        protectedHttpProvider\r\n            .getAction(\"api/v1/orders/get\")\r\n            .then((res) => {\r\n                const { orders } = res.data;\r\n                setOrdersList([...orders]);\r\n                setCompleteLoading(false);\r\n            })\r\n            .catch((err) => {\r\n                //err\r\n                notification.error({\r\n                    message: \"Error while loading orders\",\r\n                });\r\n                setCompleteLoading(false);\r\n            });\r\n    }, []);\r\n\r\n    const handleShowProduct = (data) => {\r\n        setCurrentProducts([...data]);\r\n        setShowProduct(true);\r\n    };\r\n\r\n    const deleteOrder = (id) => {\r\n        setCompleteLoading(true);\r\n        protectedHttpProvider\r\n            .postAction(`api/v1/orders/delete/${id}`)\r\n            .then((res) => {\r\n                if (res.status === 200) {\r\n                    const newList = [...deepClone(ordersList)].filter(\r\n                        (order) => order._id !== id\r\n                    );\r\n                    setOrdersList(newList);\r\n                    notification.success({\r\n                        message: \"Order deleted successfully\",\r\n                    });\r\n                } else {\r\n                    notification.error({ message: \"Something went wrong\" });\r\n                }\r\n                setCompleteLoading(false);\r\n            })\r\n            .catch((err) => {\r\n                notification.error({ message: \"Something went wrong\" });\r\n                setCompleteLoading(false);\r\n            });\r\n    };\r\n\r\n    const getDateAndTime = (item) => {\r\n        const date = new Date(item);\r\n        const dd = String(date.getDate()).padStart(2, \"0\");\r\n        const mm = String(date.getMonth() + 1).padStart(2, \"0\"); //January is 0!\r\n        const yyyy = date.getFullYear();\r\n        //time\r\n        let hours = date.getHours();\r\n        let minutes = date.getMinutes();\r\n        let ampm = hours >= 12 ? \"pm\" : \"am\";\r\n        hours = hours % 12;\r\n        hours = hours ? hours : 12; // the hour '0' should be '12'\r\n        minutes = minutes < 10 ? \"0\" + minutes : minutes;\r\n        const strTime = hours + \":\" + minutes + \" \" + ampm;\r\n\r\n        return dd + \"/\" + mm + \"/\" + yyyy + \" \" + strTime;\r\n    };\r\n\r\n    const columns = [\r\n        {\r\n            title: \"User Name\",\r\n            dataIndex: \"userName\",\r\n            key: \"userName\",\r\n            render: (item, data) => (\r\n                <>\r\n                    <Popover content={<Row>{data.userId}</Row>}>\r\n                        <span>{item}</span>\r\n                    </Popover>\r\n                </>\r\n            ),\r\n        },\r\n        {\r\n            title: \"Mobile Number\",\r\n            dataIndex: \"mobileNo\",\r\n            key: \"mobileNo\",\r\n        },\r\n        {\r\n            title: \"Loaction\",\r\n            dataIndex: \"location\",\r\n            key: \"location\",\r\n        },\r\n        {\r\n            title: \"Address\",\r\n            dataIndex: \"address\",\r\n            key: \"address\",\r\n        },\r\n        {\r\n            title: \"Orderd Time\",\r\n            dataIndex: \"orderdTime\",\r\n            key: \"orderdTime\",\r\n            render: (item) => <span>{getDateAndTime(item)}</span>,\r\n        },\r\n\r\n        {\r\n            title: \"Total Cart Value\",\r\n            dataIndex: \"totalAmount\",\r\n            key: \"totalAmount\",\r\n        },\r\n        {\r\n            title: \"Products\",\r\n            dataIndex: \"products\",\r\n            key: \"products\",\r\n            render: (item, data) => (\r\n                <Button onClick={() => handleShowProduct(item)}>Click</Button>\r\n            ),\r\n        },\r\n        {\r\n            title: \"Print\",\r\n            dataIndex: \"print\",\r\n            key: \"print\",\r\n            render: (item, data) => (\r\n                <BlobProvider\r\n                    document={<PDFDocumnet value={data} />}\r\n                    fileName=\"nice.pdf\"\r\n                >\r\n                    {({ url }) => (\r\n                        <a\r\n                            className=\"print-button\"\r\n                            href={url}\r\n                            target=\"_blank\"\r\n                            rel=\"noopener noreferrer\"\r\n                        >\r\n                            Print\r\n                        </a>\r\n                    )}\r\n                </BlobProvider>\r\n            ),\r\n        },\r\n        {\r\n            title: \"\",\r\n            dataIndex: \"_id\",\r\n            key: \"_id\",\r\n            render: (item, data) => (\r\n                <Button onClick={() => deleteOrder(item)} type=\"primary\" danger>\r\n                    Delete\r\n                </Button>\r\n            ),\r\n        },\r\n    ];\r\n    return (\r\n        <>\r\n            {showProduct && (\r\n                <ProductList\r\n                    values={currentProducts}\r\n                    visibility={showProduct}\r\n                    setVisibility={setShowProduct}\r\n                />\r\n            )}\r\n            <Spin size=\"large\" spinning={completeLoading}>\r\n                <Table dataSource={deepClone(ordersList)} columns={columns} />\r\n            </Spin>\r\n        </>\r\n    );\r\n}\r\n"],"sourceRoot":""}