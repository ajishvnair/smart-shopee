{"version":3,"sources":["common/dataProvider/dataProvider.js","components/custom-components/time-picker/index.js","components/products/add-new/index.js","components/products/index.js"],"names":["categoryData","categoryNameEnglish","categoryNameMalayalam","image","status","isDeleted","priority","productData","_id","categoryId","active","productNameEnglish","productNameMalayalam","unit","actualPrice","sellingPrice","validity","startTime","endTime","description","locationData","location","React","memo","value","onChange","useState","moment","undefined","time","setTime","useEffect","triggerChange","useCallback","timeStrings","onTimeChange","timeValue","format","style","width","placeholder","use12Hours","TextArea","Input","Option","Select","visibility","handleCancel","handleSave","Form","useForm","form","selectedFile","setSelectedFile","setFieldsValue","visible","okText","onOk","getFieldsValue","validateFields","then","formValues","onCancel","closable","Item","name","label","rules","required","message","span","rows","type","event","target","files","props","productList","setProductList","addModal","setAddModal","curreElement","setCurrentElement","completeLoading","setCompleteLoading","setCategoryId","id","match","params","httpProvider","getAction","res","products","data","catch","err","notification","error","changeProductStatus","protectedHttpProvider","postAction","item","deepClone","find","pro","index","findIndex","newList","formData","toFormData","product","success","push","columns","title","dataIndex","key","render","checked","onClick","className","src","alt","currentProduct","prod","editProduct","filter","danger","size","spinning","dataSource"],"mappings":"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","file":"static/js/9.00643599.chunk.js","sourcesContent":["export const categoryData = {\r\n    categoryNameEnglish: \"\",\r\n    categoryNameMalayalam: \"\",\r\n    image: null,\r\n    status: false,\r\n    isDeleted: false,\r\n    priority: null,\r\n};\r\n\r\nexport const productData = {\r\n    _id: null,\r\n    categoryId: null,\r\n    active: false,\r\n    productNameEnglish: \"\",\r\n    productNameMalayalam: \"\",\r\n    unit: \"1kg\",\r\n    actualPrice: \"\",\r\n    sellingPrice: \"\",\r\n    isDeleted: false,\r\n    validity: {\r\n        startTime: null,\r\n        endTime: null,\r\n    },\r\n    description: \"\",\r\n    image: null,\r\n    priority: null,\r\n};\r\n\r\nexport const locationData = {\r\n    _id: null,\r\n    active: false,\r\n    location: \"\",\r\n};\r\n","import React, { useCallback, useState, useEffect } from \"react\";\r\nimport moment from \"moment\";\r\nimport { TimePicker } from \"antd\";\r\n\r\nexport default React.memo(function ({ value, onChange }) {\r\n    const timeFormat = \"HH:mm\";\r\n    const [time, setTime] = useState(\r\n        value ? moment(value, timeFormat) : undefined\r\n    );\r\n\r\n    useEffect(() => {\r\n        setTime(\r\n            value && value !== \"undefined\" ? moment(value, timeFormat) : null\r\n        );\r\n    }, [value]);\r\n\r\n    /**\r\n     * update associated form field value\r\n     * @param {*} timeStrings time in `mm:ss` format\r\n     */\r\n    const triggerChange = useCallback(\r\n        (timeStrings) => {\r\n            if (onChange) {\r\n                onChange(timeStrings);\r\n            }\r\n        },\r\n        [onChange]\r\n    );\r\n\r\n    /**\r\n     * on time change\r\n     * @param {*} time in moment format\r\n     */\r\n    const onTimeChange = useCallback(\r\n        (timeValue) => {\r\n            setTime(timeValue);\r\n            const timeStrings = timeValue\r\n                ? timeValue.format(timeFormat)\r\n                : undefined;\r\n            triggerChange(timeStrings);\r\n        },\r\n        [triggerChange]\r\n    );\r\n\r\n    return (\r\n        <span>\r\n            <TimePicker\r\n                onChange={onTimeChange}\r\n                value={time}\r\n                style={{ width: \"150px\" }}\r\n                placeholder=\"Hour:Minutes\"\r\n                format={timeFormat}\r\n                use12Hours={true}\r\n            />\r\n        </span>\r\n    );\r\n});\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Modal, Input, Select, Form, Row, Col } from \"antd\";\r\nimport TimePicker from \"../../custom-components/time-picker\";\r\n\r\nconst { TextArea } = Input;\r\nconst { Option } = Select;\r\n\r\nexport default function ({ visibility, handleCancel, handleSave, value }) {\r\n    const [form] = Form.useForm();\r\n    const [selectedFile, setSelectedFile] = useState(null);\r\n\r\n    useEffect(() => {\r\n        const { setFieldsValue } = form;\r\n        setFieldsValue({ ...value });\r\n        setSelectedFile(null);\r\n    }, [value, form]);\r\n    /**\r\n     * take formValue and merge with formValues\r\n     */\r\n    const handleAdd = () => {\r\n        const { getFieldsValue, validateFields } = form;\r\n        validateFields().then(() => {\r\n            const formValues = getFieldsValue();\r\n\r\n            handleSave({\r\n                ...value,\r\n                ...formValues,\r\n                image: selectedFile,\r\n            });\r\n        });\r\n    };\r\n\r\n    const handleImageUplaod = (event) => {\r\n        setSelectedFile(event.target.files[0]);\r\n    };\r\n\r\n    return (\r\n        <Modal\r\n            visible={visibility}\r\n            okText={value._id ? `Save` : `Add`}\r\n            onOk={handleAdd}\r\n            onCancel={handleCancel}\r\n            closable={false}\r\n        >\r\n            <Form form={form}>\r\n                <Form.Item\r\n                    name={[\"productNameEnglish\"]}\r\n                    label=\"Category Name in English\"\r\n                    rules={[\r\n                        {\r\n                            required: true,\r\n                            message: \"Name is rquired\",\r\n                        },\r\n                    ]}\r\n                >\r\n                    <Input />\r\n                </Form.Item>\r\n                <Form.Item\r\n                    name={[\"productNameMalayalam\"]}\r\n                    label=\"Category Name in Malayalam\"\r\n                    rules={[\r\n                        {\r\n                            required: true,\r\n                            message: \"Name is required\",\r\n                        },\r\n                    ]}\r\n                >\r\n                    <Input />\r\n                </Form.Item>\r\n                <Form.Item\r\n                    name={[\"unit\"]}\r\n                    label=\"Unit\"\r\n                    rules={[\r\n                        {\r\n                            required: true,\r\n                            message: \"Unit is required\",\r\n                        },\r\n                    ]}\r\n                >\r\n                    <Select>\r\n                        <Option value=\"1Piece\">1Piece</Option>\r\n                        <Option value=\"100g\">100g</Option>\r\n                        <Option value=\"200g\">200g</Option>\r\n                        <Option value=\"250g\">250g</Option>\r\n                        <Option value=\"300g\">300g</Option>\r\n                        <Option value=\"500g\">500g</Option>\r\n                        <Option value=\"750g\">750g</Option>\r\n                        <Option value=\"1kg\">1Kg</Option>\r\n                        <Option value=\"2kg\">2Kg</Option>\r\n                        <Option value=\"250l\">250l</Option>\r\n                        <Option value=\"500l\">500l</Option>\r\n                        <Option value=\"1l\">1l</Option>\r\n                    </Select>\r\n                </Form.Item>\r\n                <Form.Item\r\n                    name={[\"actualPrice\"]}\r\n                    label=\"Actual Price\"\r\n                    rules={[\r\n                        {\r\n                            required: true,\r\n                            message: \"Actual price is required\",\r\n                        },\r\n                    ]}\r\n                >\r\n                    <Input />\r\n                </Form.Item>\r\n                <Form.Item\r\n                    name={[\"sellingPrice\"]}\r\n                    label=\"Selling Price\"\r\n                    rules={[\r\n                        {\r\n                            required: true,\r\n                            message: \"Price is required\",\r\n                        },\r\n                    ]}\r\n                >\r\n                    <Input />\r\n                </Form.Item>\r\n                <Form.Item name={[\"priority\"]} label=\"Priority\">\r\n                    <Input />\r\n                </Form.Item>\r\n                <Row>\r\n                    <Col span={12}>\r\n                        <Form.Item\r\n                            name={[\"startTime\"]}\r\n                            label=\"Start Time\"\r\n                            rules={[]}\r\n                        >\r\n                            <TimePicker format=\"HH:mm\" />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item\r\n                            name={[\"endTime\"]}\r\n                            label=\"Start Time\"\r\n                            rules={[]}\r\n                        >\r\n                            <TimePicker format=\"HH:mm\" />\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n                <Form.Item\r\n                    name={[\"description\"]}\r\n                    label=\"Description\"\r\n                    rules={[]}\r\n                >\r\n                    <TextArea rows={3} />\r\n                </Form.Item>\r\n                <input type=\"file\" onChange={handleImageUplaod} />\r\n            </Form>\r\n        </Modal>\r\n    );\r\n}\r\n","import React, { useEffect, useState, useCallback } from \"react\";\r\nimport { Table, Switch, Button, Spin, notification } from \"antd\";\r\nimport {\r\n    deepClone,\r\n    createUUID,\r\n    toFormData,\r\n} from \"../../common/helper/commonMethods\";\r\nimport { productData } from \"../../common/dataProvider/dataProvider\";\r\nimport { protectedHttpProvider, httpProvider } from \"../../common/http\";\r\nimport { SERVER } from \"../../environments/Environments\";\r\nimport AddNew from \"./add-new\";\r\n\r\nexport default function (props) {\r\n    const [productList, setProductList] = useState([]);\r\n    const [addModal, setAddModal] = useState(false);\r\n    const [curreElement, setCurrentElement] = useState(null);\r\n    const [completeLoading, setCompleteLoading] = useState(true);\r\n    const [categoryId, setCategoryId] = useState(null);\r\n\r\n    useEffect(() => {\r\n        const { id } = props.match.params;\r\n        httpProvider\r\n            .getAction(`/api/v1/product/all/${id}`)\r\n            .then((res) => {\r\n                const { products } = res.data;\r\n                setProductList([...products]);\r\n                setCompleteLoading(false);\r\n            })\r\n            .catch((err) => {\r\n                notification.error({\r\n                    message: \"Error while fetching products please refresh\",\r\n                });\r\n                setCompleteLoading(false);\r\n            });\r\n        setCategoryId(id);\r\n    }, [props.match.params]);\r\n\r\n    const changeProductStatus = useCallback(\r\n        (id, value) => {\r\n            setCompleteLoading(true);\r\n            protectedHttpProvider\r\n                .postAction(`/api/v1/product/update/${id}`, { active: value })\r\n                .then((res) => {\r\n                    if (res.status === 200) {\r\n                        let item = [...deepClone(productList)].find(\r\n                            (pro) => pro._id === id\r\n                        );\r\n                        const index = [...deepClone(productList)].findIndex(\r\n                            (pro) => pro._id === id\r\n                        );\r\n                        item.active = value;\r\n                        const newList = [...deepClone(productList)];\r\n                        newList[index] = item;\r\n                        setProductList([...newList]);\r\n                        setCompleteLoading(false);\r\n                    }\r\n                })\r\n                .catch((err) => {\r\n                    notification.error({\r\n                        message: \"Error while updating status\",\r\n                    });\r\n                    setCompleteLoading(false);\r\n                });\r\n        },\r\n        [productList]\r\n    );\r\n\r\n    const deleteProduct = (id) => {\r\n        setCompleteLoading(true);\r\n        protectedHttpProvider\r\n            .postAction(`/api/v1/product/delete/${id}`, {})\r\n            .then((res) => {\r\n                if (res.status === 200) {\r\n                    notification.success({\r\n                        message: \"Product deleted successfully\",\r\n                    });\r\n                    const newList = [...deepClone(productList)].filter(\r\n                        (pro) => pro._id !== id\r\n                    );\r\n                    setProductList(newList);\r\n                    setCompleteLoading(false);\r\n                }\r\n            })\r\n            .catch((err) => {\r\n                notification.error({\r\n                    message: \"Error while deleting category\",\r\n                });\r\n                setCompleteLoading(false);\r\n            });\r\n    };\r\n\r\n    const editProduct = (id) => {\r\n        const currentProduct = [...productList].find((prod) => prod._id === id);\r\n        setCurrentElement({ ...currentProduct });\r\n        setAddModal(true);\r\n    };\r\n\r\n    const addProduct = () => {\r\n        setCurrentElement({ ...productData });\r\n        setAddModal(true);\r\n    };\r\n\r\n    const handleSave = useCallback(\r\n        (data) => {\r\n            const newList = [...deepClone(productList)];\r\n            setCompleteLoading(true);\r\n            if (data._id) {\r\n                const formData = toFormData({ ...data, categoryId });\r\n                protectedHttpProvider\r\n                    .postAction(`/api/v1/product/${data._id}`, formData)\r\n                    .then((res) => {\r\n                        const { product } = res.data;\r\n                        // editting category in local\r\n                        const index = productList.findIndex(\r\n                            (pro) => pro._id === product._id\r\n                        );\r\n                        newList[index] = { ...product };\r\n                        setProductList([...newList]);\r\n                        // setAddModal(false);\r\n\r\n                        notification.success({\r\n                            message: \"Category Editted successfully\",\r\n                        });\r\n                        setCompleteLoading(false);\r\n                    })\r\n                    .catch((err) => {\r\n                        notification.error({\r\n                            message: \"Error while Editting product\",\r\n                        });\r\n                        // setAddModal(false);\r\n                        setCurrentElement(null);\r\n                        setCompleteLoading(false);\r\n                    });\r\n            } else {\r\n                const formData = toFormData({ ...data, categoryId });\r\n                protectedHttpProvider\r\n                    .postAction(\"/api/v1/product\", formData)\r\n                    .then((res) => {\r\n                        const { product } = res.data;\r\n                        notification.success({\r\n                            message: \"Product added successfully\",\r\n                        });\r\n                        // setting to local\r\n                        newList.push({ ...product });\r\n                        setProductList([...newList]);\r\n                        // setAddModal(false);\r\n                        setCompleteLoading(false);\r\n                    })\r\n                    .catch((err) => {\r\n                        notification.error({\r\n                            message: \"Error while Adding category\",\r\n                        });\r\n                        // setAddModal(false);\r\n                        setCurrentElement(null);\r\n                        setCompleteLoading(false);\r\n                    });\r\n            }\r\n            setProductList([...newList]);\r\n            setAddModal(false);\r\n            setCurrentElement(null);\r\n        },\r\n        [productList]\r\n    );\r\n\r\n    const handleCancel = () => {\r\n        setAddModal(false);\r\n        setCurrentElement(null);\r\n    };\r\n\r\n    const columns = [\r\n        {\r\n            title: \"Status\",\r\n            dataIndex: \"active\",\r\n            key: \"active\",\r\n            render: (item, data) => (\r\n                <Switch\r\n                    checked={item}\r\n                    onClick={(value) => changeProductStatus(data._id, value)}\r\n                />\r\n            ),\r\n        },\r\n        {\r\n            title: \"Name(English)\",\r\n            dataIndex: \"productNameEnglish\",\r\n            key: \"productNameEnglish\",\r\n        },\r\n        {\r\n            title: \"Name(Malayalam)\",\r\n            dataIndex: \"productNameMalayalam\",\r\n            key: \"productNameMalayalam\",\r\n        },\r\n        {\r\n            title: \"Unit\",\r\n            dataIndex: \"unit\",\r\n            key: \"unit\",\r\n        },\r\n        {\r\n            title: \"Actual Price\",\r\n            dataIndex: \"actualPrice\",\r\n            key: \"actualPrice\",\r\n        },\r\n        {\r\n            title: \"Selling Price\",\r\n            dataIndex: \"sellingPrice\",\r\n            key: \"sellingPrice\",\r\n        },\r\n        {\r\n            title: \"Validity\",\r\n            dataIndex: \"startTime\",\r\n            key: \"startTime\",\r\n            render: (item, data) => (\r\n                <span>\r\n                    {data.startTime &&\r\n                    data.startTime !== \"undefined\" &&\r\n                    data.endTime &&\r\n                    data.startTime !== \"undefined\"\r\n                        ? `${data.startTime} ${data.endTime}`\r\n                        : `Not set`}\r\n                </span>\r\n            ),\r\n        },\r\n        {\r\n            title: \"Priority\",\r\n            dataIndex: \"priority\",\r\n            key: \"priority\",\r\n        },\r\n        {\r\n            title: \"Image\",\r\n            dataIndex: \"image\",\r\n            key: \"image\",\r\n            render: (item) => (\r\n                <img className=\"image\" src={`${item}`} alt={item} />\r\n            ),\r\n        },\r\n        {\r\n            title: \"\",\r\n            dataIndex: \"_id\",\r\n            key: \"_id\",\r\n            render: (data) => (\r\n                <Button\r\n                    className=\"edit-button\"\r\n                    onClick={() => editProduct(data)}\r\n                >\r\n                    Edit\r\n                </Button>\r\n            ),\r\n        },\r\n        {\r\n            title: \"\",\r\n            dataIndex: \"_id\",\r\n            key: \"_id\",\r\n            render: (data) => (\r\n                <Button\r\n                    onClick={() => deleteProduct(data)}\r\n                    type=\"primary\"\r\n                    danger\r\n                >\r\n                    Delete\r\n                </Button>\r\n            ),\r\n        },\r\n    ];\r\n    return (\r\n        <Spin size=\"large\" spinning={completeLoading}>\r\n            <div className=\"items-list\">\r\n                <div className=\"add-button\">\r\n                    <Button type=\"primary\" onClick={addProduct}>\r\n                        + Add New\r\n                    </Button>\r\n                </div>\r\n                {addModal && (\r\n                    <AddNew\r\n                        visibility={addModal}\r\n                        handleCancel={handleCancel}\r\n                        value={curreElement}\r\n                        handleSave={handleSave}\r\n                    />\r\n                )}\r\n                <div className=\"list-table\">\r\n                    <Table\r\n                        dataSource={deepClone(productList)}\r\n                        columns={columns}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </Spin>\r\n    );\r\n}\r\n"],"sourceRoot":""}